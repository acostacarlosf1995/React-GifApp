{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","image","images","downsized_medium","GifGridItem","titleCut","split","slice","join","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIbC,EAJa,iDAIoCC,UAAWH,GAJ/C,+DAKAI,MAAOF,GALP,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,MAAK,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAZzB,kBAgBZM,GAhBY,4CAAH,sDCAPQ,EAAc,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAE3BI,EAAWL,EAAMM,MAAM,KAAKC,MAAM,EAAE,GAAGC,KAAK,KAElD,OACI,sBAAKC,UAAU,2DAAf,UACI,qBAAKC,IAAMT,EAAQU,IAAMX,IACzB,4BAAKK,QCLJO,EAAU,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/B4B,OAAQ,GACRW,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAjBAC,qBAAU,WAIN7B,EAASC,GACJ6B,MAAM,SAAAC,GAEHH,EAAS,CACLb,OAAQgB,EACRL,SAAS,SAMtB,CAACzB,IAEG0B,EDrBqBK,CAAc/B,GAAlCc,EAF6B,EAE7BA,OAAQW,EAFqB,EAErBA,QAKhB,OAHAO,QAAQC,IAAInB,GACZkB,QAAQC,IAAIR,GAGR,qCACI,oBAAIJ,UAAU,sDAAd,SAAuErB,IAOvE,qBAAKqB,UAAU,YAAf,SAEQP,EAAOL,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aEpBxBuB,EAAe,WAAO,IAAD,EAEMhD,mBAAS,CAAC,cAFhB,mBAEvBiD,EAFuB,KAEXlD,EAFW,KAS9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQkD,EAAW1B,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MChBlCoC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.97b17977.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n\r\n        setInputValue( e.target.value )\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories(cats => [ inputValue, ...cats ]);\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","// helpers son funciones que se encargan simplemente de realizar un return\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    //encodeURI funciona para enviar la peticion correctamente remplazando los espacios vacios u otras cosas\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=20&api_key=lqIiVjqEVduKby433b4DZR9QnlJse2Cm`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            image: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React, { useEffect } from 'react'\r\n\r\nexport const GifGridItem = ({ title, image }) => {\r\n\r\n    const titleCut = title.split(' ').slice(0,2).join(' ');\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\" >\r\n            <img src={ image } alt={ title } />\r\n            <p>{ titleCut }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { images, loading } = useFetchGifs( category );\r\n\r\n    console.log(images)\r\n    console.log(loading)\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn animate__delay-1s\" >{ category }</h3>\r\n\r\n            {/* Si loading es igual a \"true\" has esto <p>Loading</p>, con el operador && nos \r\n            encargamos de que si no es true, simplemente no haga nada */}\r\n\r\n            {/* { loading && <p className=\"animate__animated animate__flash\">Loading...</p> } */}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        images: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        // El .then se utiliza porque obviamente getGifs retorna una promesa\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    images: imgs,\r\n                    loading: false\r\n                });\r\n                \r\n            })\r\n\r\n        // El useEffect se va a volver a llamar cada vez que category cambie\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories([...categories, 'HunterXHunter']);\r\n    //     setCategories(newCategory => [...newCategory, 'HunterXHunter']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => ( \r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        /> \r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}